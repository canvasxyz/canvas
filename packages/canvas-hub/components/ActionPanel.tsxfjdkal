import React from "react"

interface ActionPanelProps {
	multihash: string
	actionParameters: Record<string, string[]>
}

export function ActionPanel(props: ActionPanelProps) {
	return (
		<div className="mt-2 mb-4">
			<div className="mb-3">
				{Object.entries(props.actionParameters).map(([call, parameters]) => (
					<div
						key={call}
						className="inline-block text-sm px-2 py-0.5 mb-1 mr-1.5 rounded bg-gray-200 hover:bg-gray-300 cursor-pointer"
						onClick={() => {
							setEditorValue(getInitialActionValue(props.multihash, call, parameters, currentAddress))
						}}
					>
						{call}
					</div>
				))}
			</div>
			<div className={styles.editor} ref={element}></div>
			<button
				className={`mt-3 mr-2 p-2 rounded bg-blue-500 hover:bg-blue-500 font-semibold text-sm text-center text-white ${
					sendingSignedAction || state === null ? "pointer-events-none opacity-50" : ""
				}`}
				disabled={sendingSignedAction || state === null}
				onClick={handleSendAction}
			>
				{sendingSignedAction ? "Signing..." : "Sign and send"}
			</button>
			<div className="mt-4">
				<Sessions
					multihash={props.multihash}
					onSelect={(session_public_key: string) => {
						setSessionPublicKey(session_public_key)
						const privateKey = localStorage.getItem(session_public_key)
						if (privateKey !== undefined && privateKey !== null) {
							setSessionPrivateKey(privateKey)
						}
					}}
				/>
			</div>
			<button
				className={`mt-3 mr-2 p-2 rounded bg-blue-500 hover:bg-blue-500 font-semibold text-sm text-center text-white ${
					generatingSession || state === null ? "pointer-events-none opacity-50" : ""
				}`}
				disabled={generatingSession || state === null}
				onClick={handleGenerateSession}
			>
				{generatingSession ? "Generating session..." : "Generate session"}
			</button>
			<button
				className={`mt-3 mr-2 p-2 rounded bg-blue-500 hover:bg-blue-500 font-semibold text-sm text-center text-white ${
					!sessionPrivateKey || sendingSessionAction || state === null ? "pointer-events-none opacity-50" : ""
				}`}
				disabled={!sessionPrivateKey || sendingSessionAction || state === null}
				onClick={handleSendSessionAction}
			>
				{sendingSessionAction ? "Sending..." : "Send"}
			</button>
		</div>
	)
}
